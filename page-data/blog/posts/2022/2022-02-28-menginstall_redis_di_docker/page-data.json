{"componentChunkName":"component---src-components-post-page-template-index-js","path":"/blog/posts/2022/2022-02-28-menginstall_redis_di_docker/","result":{"data":{"mdx":{"id":"829a0f5f-74ec-596e-af65-effec3e81cd9","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Menginstal Redis menggunakan Docker\",\n  \"date\": \"2022-02-28T00:00:00.000Z\",\n  \"published\": true,\n  \"thumbnail\": \"redis-tutorial.png\",\n  \"tags\": [\"docker\", \"redis\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", {\n    style: {\n      \"textAlign\": \"justify\"\n    }\n  }, mdx(\"strong\", null, \"Redis\"), \" adalah singkatan dari Remote Dictionary Server, adalah penyimpanan data dalam memori (RAM) yang dapat digunakan sebagai database, cache dan message broker. Redis merupakan database berbasis key-value, yang mana berbeda dengan database lain semisal MySQL ataupun dari varian database No-SQL seperti MongoDB. Kemudian Redis menggunakan memori (RAM) untuk menyimpan data sehingga lebih cepat dalam pemrosesannya, sementara database lain umumnya menggunakan hardisk.\"), mdx(\"h2\", null, \"Instal dan jalankan Redis\"), mdx(\"p\", null, \"Caranya cukup mudah, yaitu dengan menjalankan perintah dibawah ini:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ docker run --name belajar-redis -p 6379:6379 -d redis\\n\")), mdx(\"p\", null, \"Perintah diatas akan melakukan beberapa perintah berikut:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Melakukan pull (download) image redis terbaru dari Dockerhub. Jika sudah ada sebelumnya, maka tidak akan download lagi, tetapi akan menggunakan image yang telah ada.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Membuat dan menjalankan container dan memberikannya nama: \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"belajar-redis\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Mengekspos port dari container redis 6379 (setelah tanda titik dua), ke port 6379 (sebelum tanda titik dua) komputer kita (host)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"flag -d (detach mode) yaitu proses akan dijalankan di background\")), mdx(\"p\", null, \"Setelah menjalankan perintah diatas, kita dapat mengeceknya dengan mengetik \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"docker ps\"), \", kalo instalasinya berhasil kita bisa lihat container dengan NAMES = belajar-redis.\"), mdx(\"h2\", null, \"Menggunakan Redis di dalam container\"), mdx(\"p\", null, \"Kita sudah menginstal redis dan menjalankannya, akan tetapi kita belum bisa menggunakannya. Cara untuk menggunakannya, kita harus masuk kedalam container Redis yang telah dibuat terlebih dahulu, yaitu dengan mengetik perintah berikut:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ docker exec -it belajar-redis sh\\n\")), mdx(\"p\", null, \"Perintah diatas akan melakukan beberapa perintah berikut: \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Jalankan 'shell' di dalam redis container yang bernama \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"belajar-redis\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Tampilkan command prompt\")), mdx(\"p\", null, \"Kemudian kita bisa menjalankan \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redis-cli\"), \" (Redis command-line interface) dengan mengetik \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"redis-cli\"), \" pada command prompt tersebut. Kita bisa melakukan test seperti berikut:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# redis-cli\\n127.0.0.1:6379> ping\\nPONG\\n127.0.0.1:6379> set name Fulan\\nOK\\n127.0.0.1:6379> get name\\n\\\"Fulan\\\"\\n127.0.0.1:6379> \\n\\n\")), mdx(\"h2\", null, \"Menggunakan Redis tanpa masuk ke dalam container\"), mdx(\"p\", null, \"Kita sudah tahu cara menggunakan redis di dalam container, akan tetapi hal itu kurang praktis karena kita harus menjalankan beberapa perintah.\\nSekarang kita akan akan menjalankannya tanpa harus masuk dulu ke dalam container. Untuk melakukannya kita harus menginstall \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"redis-cli\"), \". Bagi pengguna Ubuntu bisa menjalankan perintah berikut: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ sudo apt install redis-tools\\n\")), mdx(\"p\", null, \"Untuk OS lain silahkan cari sendiri ya. hehe\\nSekarang, coba ketik redis-cli di PC/Laptop kita. Jika muncul, sukses make akan muncul seperti halnya kita menjalankan di dalam container.  \"), mdx(\"h2\", null, \"Tambahan\"), mdx(\"p\", null, \"Ketika kita menjalankan sebuah container, kemudian kita restart PC/Laptop kita maka yang akan terjadi adalah container yang kita jalankan terakhir akan berhenti, harus dijalankan ulang. Jika kita ingin agar container kita jalan kembali otomatis setelah PC/Laptop direstart atau shutdown maka kita bisa menjalankan perintah berikut:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ docker update --restart unless-stopped belajar-redis\\n\")), mdx(\"p\", null, \"Sumber: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/idomongodb/installing-redis-server-using-docker-container-453c3cfffbdf\"\n  }), \"https://medium.com/idomongodb/installing-redis-server-using-docker-container-453c3cfffbdf\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/21795340/linux-install-redis-cli-only\"\n  }), \"https://stackoverflow.com/questions/21795340/linux-install-redis-cli-only\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://docs.docker.com/config/containers/start-containers-automatically/\"\n  }), \"https://docs.docker.com/config/containers/start-containers-automatically/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/blog/posts/2022/2022-02-28-menginstall_redis_di_docker/"},"frontmatter":{"title":"Menginstal Redis menggunakan Docker","tags":["docker","redis"],"date":"28 Februari 2022","thumbnail":{"publicURL":"/static/4dafb2e107ea52b914cbedb658ff87d0/redis-tutorial.png"}}}},"pageContext":{"id":"829a0f5f-74ec-596e-af65-effec3e81cd9"}},"staticQueryHashes":[]}